# https://github.com/marketplace/actions/sticky-pull-request-comment
# according to the documentation above we might need to adapt the messages with headers.

name: Run Lint Test and Formatting Scrips

on:
  pull_request:
    branches:
        - main

jobs:
    runChecks:
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        #strategy??? Maybe we need strategy.

        steps:
            - uses: actions/checkout@v4

            - name: run checks
              uses: actions/setup-node@v4
              # Might be good to test using different node versions
              
            - run: npm ci


            - name: run tests
              if: '!cancelled()'
              run: |
                npm run test | tee test-output.txt


            - name: run lint
              if: '!cancelled()'
              run: |
                npm run lint | tee lint-output.txt


            - name: run format
              if: '!cancelled()'
              run: |
                npm run format | tee format-output.txt


            # can't have a name since there is no "run". So it' just a blank uses
            - uses: marocchino/sticky-pull-request-comment@v2
              if: '!cancelled()'
              with:
                header: check result comment
                message: |
                    Wicked!

            - name: Aggregate results
              run: |
                echo "## Lint Results" > comment-body.txt
                cat lint-output.txt >> comment-body.txt
                echo "" >> comment-body.txt
                echo "## Test Results" >> comment-body.txt
                cat test-output.txt >> comment-body.txt
                echo "" >> comment-body.txt
                echo "## Format Results" >> comment-body.txt
                cat format-output.txt >> comment-body.txt
            

            - uses: marocchino/sticky-pull-request-comment@v2
              with:
                header: 'CI Results'
                message: |
                    $(cat comment-body.txt) #yeah nice try xD 

# The basic idea is the following: 
# Write the output of each step into a separate file and then
# then read the file, transform as necessary and write a nice commentuwu
# don't forget to make cool tables using markdown
# test.png
            